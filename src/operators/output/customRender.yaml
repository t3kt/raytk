!rop
meta: !meta
  opType: raytk.operators.output.customRender
  opVersion: '28'
  opStatus: beta
paramPages:
- !page
  name: Render
  pars:
    Bodytemplate:
      name: Bodytemplate
      label: Body Template
      style: DAT
      default: ''
    Createbodytemplate:
      name: Createbodytemplate
      label: Create Body Template
      style: Pulse
      default: false
    Outputbuffertable:
      name: Outputbuffertable
      label: Output Buffer Table
      style: DAT
      default: ''
    Createoutputbuffertable:
      name: Createoutputbuffertable
      label: Create Output Buffer Table
      style: Pulse
      default: false
    Librarynames:
      name: Librarynames
      label: Library Names
      style: StrMenu
      default: hg_sdf raytkCore raytkCommon raytkSdf
      menuNames:
      - hg_sdf
      - raytkCommon
      - raytkSdf
      - raytkMaterial
      - ' raytkCore'
      menuLabels:
      - hg_sdf
      - raytkCommon
      - raytkSdf
      - raytkMaterial
      - Label 5
    Typespec:
      name: Typespec
      label: Type Spec
      style: COMP
      default: ''
    Timerefop:
      name: Timerefop
      label: Time Reference Operator
      style: OP
      default: ''
    Format:
      name: Format
      label: Pixel Format
      style: Menu
      default: rgba32float
      menuNames:
      - useinput
      - rgba8fixed
      - srgba8fixed
      - rgba16float
      - rgba32float
      - _separator_
      - rgb10a2fixed
      - rgba16fixed
      - rgba11float
      - rgb16float
      - rgb32float
      - mono8fixed
      - mono16fixed
      - mono16float
      - mono32float
      - rg8fixed
      - rg16fixed
      - rg16float
      - rg32float
      - a8fixed
      - a16fixed
      - a16float
      - a32float
      - monoalpha8fixed
      - monoalpha16fixed
      - monoalpha16float
      - monoalpha32float
      menuLabels:
      - Use Input
      - 8-bit fixed (RGBA)
      - sRGB 8-bit fixed (RGBA)
      - 16-bit float (RGBA)
      - 32-bit float (RGBA)
      - _separator_
      - 10-bit RGB, 2-bit Alpha, fixed (RGBA)
      - 16-bit fixed (RGBA)
      - 11-bit float (RGB), Positive Values Only
      - 16-bit float (RGB)
      - 32-bit float (RGB)
      - 8-bit fixed (Mono)
      - 16-bit fixed (Mono)
      - 16-bit float (Mono)
      - 32-bit float (Mono)
      - 8-bit fixed (RG)
      - 16-bit fixed (RG)
      - 16-bit float (RG)
      - 32-bit float (RG)
      - 8-bit fixed (A)
      - 16-bit fixed (A)
      - 16-bit float (A)
      - 32-bit float (A)
      - 8-bit fixed (Mono+Alpha)
      - 16-bit fixed (Mono+Alpha)
      - 16-bit float (Mono+Alpha)
      - 32-bit float (Mono+Alpha)
    Res:
      name: Res
      label: Resolution
      style: XY
      default:
      - 1920.0
      - 1080.0
      startSection: true
      normMin: 0.0
      normMax:
      - 3840.0
      - 2160.0
    Inputfiltertype:
      name: Inputfiltertype
      label: Input Smoothness
      style: Menu
      default: linear
      menuNames:
      - nearest
      - linear
      - mipmap
      menuLabels:
      - Nearest Pixel
      - Interpolate Pixels
      - Mipmap Pixels
    Shaderbuilderconfig:
      name: Shaderbuilderconfig
      label: Shader Builder Config
      style: COMP
      default: ''
      startSection: true
- !page
  name: Info
  pars:
    Shaderinfo:
      name: Shaderinfo
      label: Shader Info
      style: DAT
      default: ./shader_info
      readOnly: true
    Shadercode:
      name: Shadercode
      label: Shader Code
      style: DAT
      default: ./shader_code
      readOnly: true
    Shadertop:
      name: Shadertop
      label: Shader TOP
      style: TOP
      default: ./render_glsl
      readOnly: true
    Outputtable:
      name: Outputtable
      label: Output Table
      style: DAT
      default: ./output_table
      readOnly: true
    Shaderbuilder:
      name: Shaderbuilder
      label: Shader Builder
      style: COMP
      default: ./shaderBuilder
      readOnly: true
opDef: !def
  enable: true
  paramsOp: !expr
    expr: parent().par.Paramsop.eval() or ''
  typeSpec: !ropTypes
    coordType: !coordT
      Allcoordtype: true
    contextType: !contextT
      Allcontexttype: true
    returnType: !returnT
      Allreturntype: true
  function: functionTemplate
  callbacks: !text
    file: src/operators/output/customRender.py
    name: customRender
  paramGroupTable: eval_params
  macroTable: !table
    file: src/operators/output/customRender_macros.txt
    name: macro_exprs
    evaluate: true
    evalOpts: !evalOpts {}
  displayCategory: Render
inputs:
- !input
  Localalias: !expr
    expr: op('inputTable')[1, 'name']
  Prohibited: !expr
    expr: op('inputTable')[1, 'exists'] != '1'
  coordType: !coordT
    Allcoordtype: !expr
      expr: op('inputTable')[1, 'coordType'].val in ('auto', '')
    Coordtypefloat: !expr
      expr: op('inputTable')[1, 'coordType'] == 'float'
    Coordtypevec2: !expr
      expr: op('inputTable')[1, 'coordType'] == 'vec2'
    Coordtypevec3: !expr
      expr: op('inputTable')[1, 'coordType'] == 'vec3'
    Coordtypevec4: !expr
      expr: op('inputTable')[1, 'coordType'] == 'vec4'
  contextType: !contextT
    Allcontexttype: !expr
      expr: op('inputTable')[1, 'contextType'].val in ('auto', '')
    Contexttypecontext: !expr
      expr: op('inputTable')[1, 'contextType'] == 'Context'
    Contexttypematerialcontext: !expr
      expr: op('inputTable')[1, 'contextType'] == 'MaterialContext'
    Contexttypecameracontext: !expr
      expr: op('inputTable')[1, 'contextType'] == 'CameraContext'
    Contexttypelightcontext: !expr
      expr: op('inputTable')[1, 'contextType'] == 'LightContext'
    Contexttyperaycontext: !expr
      expr: op('inputTable')[1, 'contextType'] == 'RayContext'
    Contexttypevertexcontext: !expr
      expr: op('inputTable')[1, 'contextType'] == 'VertexContext'
    Contexttypepixelcontext: !expr
      expr: op('inputTable')[1, 'contextType'] == 'PixelContext'
  returnType: !returnT
    Allreturntype: !expr
      expr: op('inputTable')[1, 'returnType'].val in ('auto', '')
    Returntypesdf: !expr
      expr: op('inputTable')[1, 'returnType'] == 'Sdf'
    Returntypefloat: !expr
      expr: op('inputTable')[1, 'returnType'] == 'float'
    Returntypevec4: !expr
      expr: op('inputTable')[1, 'returnType'] == 'vec4'
    Returntyperay: !expr
      expr: op('inputTable')[1, 'returnType'] == 'Ray'
    Returntypelight: !expr
      expr: op('inputTable')[1, 'returnType'] == 'Light'
- !input
  Localalias: !expr
    expr: op('inputTable')[2, 'name']
  Prohibited: !expr
    expr: op('inputTable')[2, 'exists'] != '1'
  coordType: !coordT
    Allcoordtype: !expr
      expr: op('inputTable')[2, 'coordType'].val in ('auto', '')
    Coordtypefloat: !expr
      expr: op('inputTable')[2, 'coordType'] == 'float'
    Coordtypevec2: !expr
      expr: op('inputTable')[2, 'coordType'] == 'vec2'
    Coordtypevec3: !expr
      expr: op('inputTable')[2, 'coordType'] == 'vec3'
    Coordtypevec4: !expr
      expr: op('inputTable')[2, 'coordType'] == 'vec4'
  contextType: !contextT
    Allcontexttype: !expr
      expr: op('inputTable')[2, 'contextType'].val in ('auto', '')
    Contexttypecontext: !expr
      expr: op('inputTable')[2, 'contextType'] == 'Context'
    Contexttypematerialcontext: !expr
      expr: op('inputTable')[2, 'contextType'] == 'MaterialContext'
    Contexttypecameracontext: !expr
      expr: op('inputTable')[2, 'contextType'] == 'CameraContext'
    Contexttypelightcontext: !expr
      expr: op('inputTable')[2, 'contextType'] == 'LightContext'
    Contexttyperaycontext: !expr
      expr: op('inputTable')[2, 'contextType'] == 'RayContext'
    Contexttypevertexcontext: !expr
      expr: op('inputTable')[2, 'contextType'] == 'VertexContext'
    Contexttypepixelcontext: !expr
      expr: op('inputTable')[2, 'contextType'] == 'PixelContext'
  returnType: !returnT
    Allreturntype: !expr
      expr: op('inputTable')[2, 'returnType'].val in ('auto', '')
    Returntypesdf: !expr
      expr: op('inputTable')[2, 'returnType'] == 'Sdf'
    Returntypefloat: !expr
      expr: op('inputTable')[2, 'returnType'] == 'float'
    Returntypevec4: !expr
      expr: op('inputTable')[2, 'returnType'] == 'vec4'
    Returntyperay: !expr
      expr: op('inputTable')[2, 'returnType'] == 'Ray'
    Returntypelight: !expr
      expr: op('inputTable')[2, 'returnType'] == 'Light'
- !input
  Localalias: !expr
    expr: op('inputTable')[3, 'name']
  Prohibited: !expr
    expr: op('inputTable')[3, 'exists'] != '1'
  coordType: !coordT
    Allcoordtype: !expr
      expr: op('inputTable')[3, 'coordType'].val in ('auto', '')
    Coordtypefloat: !expr
      expr: op('inputTable')[3, 'coordType'] == 'float'
    Coordtypevec2: !expr
      expr: op('inputTable')[3, 'coordType'] == 'vec2'
    Coordtypevec3: !expr
      expr: op('inputTable')[3, 'coordType'] == 'vec3'
    Coordtypevec4: !expr
      expr: op('inputTable')[3, 'coordType'] == 'vec4'
  contextType: !contextT
    Allcontexttype: !expr
      expr: op('inputTable')[3, 'contextType'].val in ('auto', '')
    Contexttypecontext: !expr
      expr: op('inputTable')[3, 'contextType'] == 'Context'
    Contexttypematerialcontext: !expr
      expr: op('inputTable')[3, 'contextType'] == 'MaterialContext'
    Contexttypecameracontext: !expr
      expr: op('inputTable')[3, 'contextType'] == 'CameraContext'
    Contexttypelightcontext: !expr
      expr: op('inputTable')[3, 'contextType'] == 'LightContext'
    Contexttyperaycontext: !expr
      expr: op('inputTable')[3, 'contextType'] == 'RayContext'
    Contexttypevertexcontext: !expr
      expr: op('inputTable')[3, 'contextType'] == 'VertexContext'
    Contexttypepixelcontext: !expr
      expr: op('inputTable')[3, 'contextType'] == 'PixelContext'
  returnType: !returnT
    Allreturntype: !expr
      expr: op('inputTable')[3, 'returnType'].val in ('auto', '')
    Returntypesdf: !expr
      expr: op('inputTable')[3, 'returnType'] == 'Sdf'
    Returntypefloat: !expr
      expr: op('inputTable')[3, 'returnType'] == 'float'
    Returntypevec4: !expr
      expr: op('inputTable')[3, 'returnType'] == 'vec4'
    Returntyperay: !expr
      expr: op('inputTable')[3, 'returnType'] == 'Ray'
    Returntypelight: !expr
      expr: op('inputTable')[3, 'returnType'] == 'Light'
- !input
  Localalias: !expr
    expr: op('inputTable')[4, 'name']
  Prohibited: !expr
    expr: op('inputTable')[4, 'exists'] != '1'
  coordType: !coordT
    Allcoordtype: !expr
      expr: op('inputTable')[4, 'coordType'].val in ('auto', '')
    Coordtypefloat: !expr
      expr: op('inputTable')[4, 'coordType'] == 'float'
    Coordtypevec2: !expr
      expr: op('inputTable')[4, 'coordType'] == 'vec2'
    Coordtypevec3: !expr
      expr: op('inputTable')[4, 'coordType'] == 'vec3'
    Coordtypevec4: !expr
      expr: op('inputTable')[4, 'coordType'] == 'vec4'
  contextType: !contextT
    Allcontexttype: !expr
      expr: op('inputTable')[4, 'contextType'].val in ('auto', '')
    Contexttypecontext: !expr
      expr: op('inputTable')[4, 'contextType'] == 'Context'
    Contexttypematerialcontext: !expr
      expr: op('inputTable')[4, 'contextType'] == 'MaterialContext'
    Contexttypecameracontext: !expr
      expr: op('inputTable')[4, 'contextType'] == 'CameraContext'
    Contexttypelightcontext: !expr
      expr: op('inputTable')[4, 'contextType'] == 'LightContext'
    Contexttyperaycontext: !expr
      expr: op('inputTable')[4, 'contextType'] == 'RayContext'
    Contexttypevertexcontext: !expr
      expr: op('inputTable')[4, 'contextType'] == 'VertexContext'
    Contexttypepixelcontext: !expr
      expr: op('inputTable')[4, 'contextType'] == 'PixelContext'
  returnType: !returnT
    Allreturntype: !expr
      expr: op('inputTable')[4, 'returnType'].val in ('auto', '')
    Returntypesdf: !expr
      expr: op('inputTable')[4, 'returnType'] == 'Sdf'
    Returntypefloat: !expr
      expr: op('inputTable')[4, 'returnType'] == 'float'
    Returntypevec4: !expr
      expr: op('inputTable')[4, 'returnType'] == 'vec4'
    Returntyperay: !expr
      expr: op('inputTable')[4, 'returnType'] == 'Ray'
    Returntypelight: !expr
      expr: op('inputTable')[4, 'returnType'] == 'Light'
- !input
  Localalias: !expr
    expr: op('inputTable')[5, 'name']
  Prohibited: !expr
    expr: op('inputTable')[5, 'exists'] != '1'
  coordType: !coordT
    Allcoordtype: !expr
      expr: op('inputTable')[5, 'coordType'].val in ('auto', '')
    Coordtypefloat: !expr
      expr: op('inputTable')[5, 'coordType'] == 'float'
    Coordtypevec2: !expr
      expr: op('inputTable')[5, 'coordType'] == 'vec2'
    Coordtypevec3: !expr
      expr: op('inputTable')[5, 'coordType'] == 'vec3'
    Coordtypevec4: !expr
      expr: op('inputTable')[5, 'coordType'] == 'vec4'
  contextType: !contextT
    Allcontexttype: !expr
      expr: op('inputTable')[5, 'contextType'].val in ('auto', '')
    Contexttypecontext: !expr
      expr: op('inputTable')[5, 'contextType'] == 'Context'
    Contexttypematerialcontext: !expr
      expr: op('inputTable')[5, 'contextType'] == 'MaterialContext'
    Contexttypecameracontext: !expr
      expr: op('inputTable')[5, 'contextType'] == 'CameraContext'
    Contexttypelightcontext: !expr
      expr: op('inputTable')[5, 'contextType'] == 'LightContext'
    Contexttyperaycontext: !expr
      expr: op('inputTable')[5, 'contextType'] == 'RayContext'
    Contexttypevertexcontext: !expr
      expr: op('inputTable')[5, 'contextType'] == 'VertexContext'
    Contexttypepixelcontext: !expr
      expr: op('inputTable')[5, 'contextType'] == 'PixelContext'
  returnType: !returnT
    Allreturntype: !expr
      expr: op('inputTable')[5, 'returnType'].val in ('auto', '')
    Returntypesdf: !expr
      expr: op('inputTable')[5, 'returnType'] == 'Sdf'
    Returntypefloat: !expr
      expr: op('inputTable')[5, 'returnType'] == 'float'
    Returntypevec4: !expr
      expr: op('inputTable')[5, 'returnType'] == 'vec4'
    Returntyperay: !expr
      expr: op('inputTable')[5, 'returnType'] == 'Ray'
    Returntypelight: !expr
      expr: op('inputTable')[5, 'returnType'] == 'Light'
- !input
  Localalias: !expr
    expr: op('inputTable')[6, 'name']
  Prohibited: !expr
    expr: op('inputTable')[6, 'exists'] != '1'
  coordType: !coordT
    Allcoordtype: !expr
      expr: op('inputTable')[6, 'coordType'].val in ('auto', '')
    Coordtypefloat: !expr
      expr: op('inputTable')[6, 'coordType'] == 'float'
    Coordtypevec2: !expr
      expr: op('inputTable')[6, 'coordType'] == 'vec2'
    Coordtypevec3: !expr
      expr: op('inputTable')[6, 'coordType'] == 'vec3'
    Coordtypevec4: !expr
      expr: op('inputTable')[6, 'coordType'] == 'vec4'
  contextType: !contextT
    Allcontexttype: !expr
      expr: op('inputTable')[6, 'contextType'].val in ('auto', '')
    Contexttypecontext: !expr
      expr: op('inputTable')[6, 'contextType'] == 'Context'
    Contexttypematerialcontext: !expr
      expr: op('inputTable')[6, 'contextType'] == 'MaterialContext'
    Contexttypecameracontext: !expr
      expr: op('inputTable')[6, 'contextType'] == 'CameraContext'
    Contexttypelightcontext: !expr
      expr: op('inputTable')[6, 'contextType'] == 'LightContext'
    Contexttyperaycontext: !expr
      expr: op('inputTable')[6, 'contextType'] == 'RayContext'
    Contexttypevertexcontext: !expr
      expr: op('inputTable')[6, 'contextType'] == 'VertexContext'
    Contexttypepixelcontext: !expr
      expr: op('inputTable')[6, 'contextType'] == 'PixelContext'
  returnType: !returnT
    Allreturntype: !expr
      expr: op('inputTable')[6, 'returnType'].val in ('auto', '')
    Returntypesdf: !expr
      expr: op('inputTable')[6, 'returnType'] == 'Sdf'
    Returntypefloat: !expr
      expr: op('inputTable')[6, 'returnType'] == 'float'
    Returntypevec4: !expr
      expr: op('inputTable')[6, 'returnType'] == 'vec4'
    Returntyperay: !expr
      expr: op('inputTable')[6, 'returnType'] == 'Ray'
    Returntypelight: !expr
      expr: op('inputTable')[6, 'returnType'] == 'Light'
- !input
  Localalias: !expr
    expr: op('inputTable')[7, 'name']
  Prohibited: !expr
    expr: op('inputTable')[7, 'exists'] != '1'
  coordType: !coordT
    Allcoordtype: !expr
      expr: op('inputTable')[7, 'coordType'].val in ('auto', '')
    Coordtypefloat: !expr
      expr: op('inputTable')[7, 'coordType'] == 'float'
    Coordtypevec2: !expr
      expr: op('inputTable')[7, 'coordType'] == 'vec2'
    Coordtypevec3: !expr
      expr: op('inputTable')[7, 'coordType'] == 'vec3'
    Coordtypevec4: !expr
      expr: op('inputTable')[7, 'coordType'] == 'vec4'
  contextType: !contextT
    Allcontexttype: !expr
      expr: op('inputTable')[7, 'contextType'].val in ('auto', '')
    Contexttypecontext: !expr
      expr: op('inputTable')[7, 'contextType'] == 'Context'
    Contexttypematerialcontext: !expr
      expr: op('inputTable')[7, 'contextType'] == 'MaterialContext'
    Contexttypecameracontext: !expr
      expr: op('inputTable')[7, 'contextType'] == 'CameraContext'
    Contexttypelightcontext: !expr
      expr: op('inputTable')[7, 'contextType'] == 'LightContext'
    Contexttyperaycontext: !expr
      expr: op('inputTable')[7, 'contextType'] == 'RayContext'
    Contexttypevertexcontext: !expr
      expr: op('inputTable')[7, 'contextType'] == 'VertexContext'
    Contexttypepixelcontext: !expr
      expr: op('inputTable')[7, 'contextType'] == 'PixelContext'
  returnType: !returnT
    Allreturntype: !expr
      expr: op('inputTable')[7, 'returnType'].val in ('auto', '')
    Returntypesdf: !expr
      expr: op('inputTable')[7, 'returnType'] == 'Sdf'
    Returntypefloat: !expr
      expr: op('inputTable')[7, 'returnType'] == 'float'
    Returntypevec4: !expr
      expr: op('inputTable')[7, 'returnType'] == 'vec4'
    Returntyperay: !expr
      expr: op('inputTable')[7, 'returnType'] == 'Ray'
    Returntypelight: !expr
      expr: op('inputTable')[7, 'returnType'] == 'Light'
- !input
  Localalias: !expr
    expr: op('inputTable')[8, 'name']
  Prohibited: !expr
    expr: op('inputTable')[8, 'exists'] != '1'
  coordType: !coordT
    Allcoordtype: !expr
      expr: op('inputTable')[8, 'coordType'].val in ('auto', '')
    Coordtypefloat: !expr
      expr: op('inputTable')[8, 'coordType'] == 'float'
    Coordtypevec2: !expr
      expr: op('inputTable')[8, 'coordType'] == 'vec2'
    Coordtypevec3: !expr
      expr: op('inputTable')[8, 'coordType'] == 'vec3'
    Coordtypevec4: !expr
      expr: op('inputTable')[8, 'coordType'] == 'vec4'
  contextType: !contextT
    Allcontexttype: !expr
      expr: op('inputTable')[8, 'contextType'].val in ('auto', '')
    Contexttypecontext: !expr
      expr: op('inputTable')[8, 'contextType'] == 'Context'
    Contexttypematerialcontext: !expr
      expr: op('inputTable')[8, 'contextType'] == 'MaterialContext'
    Contexttypecameracontext: !expr
      expr: op('inputTable')[8, 'contextType'] == 'CameraContext'
    Contexttypelightcontext: !expr
      expr: op('inputTable')[8, 'contextType'] == 'LightContext'
    Contexttyperaycontext: !expr
      expr: op('inputTable')[8, 'contextType'] == 'RayContext'
    Contexttypevertexcontext: !expr
      expr: op('inputTable')[8, 'contextType'] == 'VertexContext'
    Contexttypepixelcontext: !expr
      expr: op('inputTable')[8, 'contextType'] == 'PixelContext'
  returnType: !returnT
    Allreturntype: !expr
      expr: op('inputTable')[8, 'returnType'].val in ('auto', '')
    Returntypesdf: !expr
      expr: op('inputTable')[8, 'returnType'] == 'Sdf'
    Returntypefloat: !expr
      expr: op('inputTable')[8, 'returnType'] == 'float'
    Returntypevec4: !expr
      expr: op('inputTable')[8, 'returnType'] == 'vec4'
    Returntyperay: !expr
      expr: op('inputTable')[8, 'returnType'] == 'Ray'
    Returntypelight: !expr
      expr: op('inputTable')[8, 'returnType'] == 'Light'
